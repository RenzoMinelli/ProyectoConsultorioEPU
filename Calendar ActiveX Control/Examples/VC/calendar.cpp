// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "calendar.h"

/////////////////////////////////////////////////////////////////////////////
// CCalendar

IMPLEMENT_DYNCREATE(CCalendar, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCalendar properties

short CCalendar::GetMonth()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CCalendar::SetMonth(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

short CCalendar::GetYear()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CCalendar::SetYear(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

CString CCalendar::GetMonthYearFont()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CCalendar::SetMonthYearFont(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CCalendar::GetDayFont()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CCalendar::SetDayFont(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

unsigned long CCalendar::GetDayColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CCalendar::SetDayColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

unsigned long CCalendar::GetMonthYearBackColor()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CCalendar::SetMonthYearBackColor(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

unsigned long CCalendar::GetDayTextColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CCalendar::SetDayTextColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

CString CCalendar::GetDayTextFont()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CCalendar::SetDayTextFont(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

unsigned long CCalendar::GetDayCaptionBackColor()
{
	unsigned long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CCalendar::SetDayCaptionBackColor(unsigned long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

CString CCalendar::GetDayCaptionFont()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CCalendar::SetDayCaptionFont(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

unsigned long CCalendar::GetDayCaptionForeColor()
{
	unsigned long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CCalendar::SetDayCaptionForeColor(unsigned long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

unsigned long CCalendar::GetBackColor()
{
	unsigned long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CCalendar::SetBackColor(unsigned long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

BOOL CCalendar::GetShowYear()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CCalendar::SetShowYear(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CCalendar::GetShowMonth()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CCalendar::SetShowMonth(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

CString CCalendar::GetLicenseKey()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CCalendar::SetLicenseKey(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

unsigned long CCalendar::GetMonthYearForeColor()
{
	unsigned long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CCalendar::SetMonthYearForeColor(unsigned long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

short CCalendar::GetDayTextFontSize()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CCalendar::SetDayTextFontSize(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CCalendar::GetDay()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CCalendar::SetDay(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCalendar operations

BOOL CCalendar::SetHighLightDay(short iYear, short iMonth, short iDay, unsigned long clrHighLight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iYear, iMonth, iDay, clrHighLight);
	return result;
}

BOOL CCalendar::SetDayCaptions(short iIndex, LPCTSTR strCaption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iIndex, strCaption);
	return result;
}

BOOL CCalendar::SetMonthCaptions(short iIndex, LPCTSTR strCaption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iIndex, strCaption);
	return result;
}

void CCalendar::SetText(short iDay, LPCTSTR strText)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iDay, strText);
}

CString CCalendar::GetText(short iYear, short iMonth, short iDay)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iYear, iMonth, iDay);
	return result;
}

unsigned long CCalendar::GetHighLightDay(short iYear, short iMonth, short iDay)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		iYear, iMonth, iDay);
	return result;
}

short CCalendar::GetHighLightDayCount()
{
	short result;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

CString CCalendar::FindHighLightDay(short iIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iIndex);
	return result;
}

unsigned long CCalendar::FindHighLightDayColor(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

short CCalendar::GetTextCount()
{
	short result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

CString CCalendar::FindTextDay(short iIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iIndex);
	return result;
}

CString CCalendar::FindText(short iIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iIndex);
	return result;
}

void CCalendar::Redraw()
{
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCalendar::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
